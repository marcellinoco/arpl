export class Session {
    constructor() {
        this._cache = {
            _data: {},
            _expire: null,
            _delete: false,
            _accessed: null
        };
    }
    setCache(cache) {
        this._cache = cache;
    }
    getCache() {
        return this._cache;
    }
    setExpire(expiration) {
        this._cache._expire = expiration;
    }
    reUpdate(expiration) {
        if (expiration)
            this.setExpire(new Date(Date.now() + expiration * 1000).toISOString());
    }
    delete() {
        this._cache._delete = true;
    }
    valid() {
        return this._cache._expire === null || new Date(this._cache._expire).getTime() > Date.now();
    }
    updateAccessed() {
        this._cache._accessed = new Date().toISOString();
    }
    get(key) {
        const entry = this._cache._data[key];
        if (!entry)
            return null;
        const value = entry.value;
        if (entry.flash)
            delete this._cache._data[key];
        return value;
    }
    set(key, value) {
        this._cache._data[key] = {
            value,
            flash: false
        };
    }
    flash(key, value) {
        this._cache._data[key] = {
            value,
            flash: true
        };
    }
}
