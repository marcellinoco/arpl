/**
 * @module logestic
 * @description This module provides a class to configure and perform logging.
 */
import Elysia from 'elysia';
import { Attribute, Callback, LogesticOptions, Preset } from './types';
export type { Attribute, LogesticOptions };
export declare const chalk: import("chalk").ChalkInstance;
/**
 * Logestic class provides methods to configure and perform logging.
 */
export declare class Logestic<K extends keyof Attribute = keyof Attribute> {
    private requestedAttrs;
    private dest;
    private showLevel;
    private logLevelColour;
    private httpLogging;
    private explicitLogging;
    /**
     * Creates a new Logestic instance.
     *
     * @param options - The options to configure the Logestic instance.
     * @see LogesticOptions
     */
    constructor(options?: LogesticOptions);
    private setDest;
    private createFileIfNotExists;
    /**
     * Requests Logestic to provide a particular attribute.
     * @param attrs - An attribute key or an array of attribute keys.
     * @returns The Logestic instance for chaining.
     */
    use<NK extends K>(attr: NK): Logestic<NK>;
    use<NK extends K>(attrs: NK[]): Logestic<NK>;
    private _use;
    /**
     * @param name The name of the preset to use.
     * @param options The options to configure the preset. Any options provided will override the preset's default options.
     * @returns A new Elysia instance with the logger plugged in.
     */
    static preset(name: Preset, options?: LogesticOptions): Elysia<"", false, {
        decorator: {
            logestic: Logestic<keyof Attribute>;
        };
        store: {
            logestic_timeStart: bigint;
        };
        derive: {};
        resolve: {};
    }, {
        type: {};
        error: {};
    }, {
        schema: {};
        macro: {};
    }, {}, {
        derive: {};
        resolve: {};
        schema: {}; /**
         * Requests Logestic to provide a particular attribute.
         * @param attrs - An attribute key or an array of attribute keys.
         * @returns The Logestic instance for chaining.
         */
    }, {
        derive: {};
        resolve: {};
        schema: {};
    }>;
    /**
     * Use this when you do not want any http logging.
     *
     * @returns Elysia instance with the logger plugged in.
     */
    build(this: Logestic): Elysia<"", false, {
        decorator: {
            logestic: Logestic<keyof Attribute>;
        };
        store: {};
        derive: {};
        resolve: {};
    }, {
        type: {};
        error: {};
    }, {
        schema: {};
        macro: {};
    }, {}, {
        derive: {};
        resolve: {};
        schema: {}; /**
         * Requests Logestic to provide a particular attribute.
         * @param attrs - An attribute key or an array of attribute keys.
         * @returns The Logestic instance for chaining.
         */
    }, {
        derive: {};
        resolve: {};
        schema: {};
    }>;
    /**
     * Successful requests will not log if httpLogging is disabled.
     * Error logs will always be logged regardless.
     *
     * @param formatAttr - The format object containing functions to format successful and failed logs.
     * @returns Elysia instance with the logger plugged in.
     */
    format(this: Logestic, formatAttr: Callback<K>): Elysia<"", false, {
        decorator: {
            logestic: Logestic<keyof Attribute>;
        };
        store: {
            logestic_timeStart: bigint;
        };
        derive: {};
        resolve: {};
    }, {
        type: {};
        error: {};
    }, {
        schema: {};
        macro: {};
    }, {}, {
        derive: {};
        resolve: {};
        schema: {}; /**
         * Requests Logestic to provide a particular attribute.
         * @param attrs - An attribute key or an array of attribute keys.
         * @returns The Logestic instance for chaining.
         */
    }, {
        derive: {};
        resolve: {};
        schema: {};
    }>;
    private log;
    /**
     * Logs an info message to the destination.
     *
     * @param msg The message to log.
     */
    info(msg: string): void;
    /**
     * Logs a warning message to the destination.
     *
     * @param msg The message to log.
     */
    warn(msg: string): void;
    /**
     * Logs a debug message to the destination.
     *
     * @param msg The message to log.
     */
    debug(msg: string): void;
    /**
     * Logs an error message to the destination.
     *
     * @param msg The message to log.
     */
    error(msg: string): void;
}
