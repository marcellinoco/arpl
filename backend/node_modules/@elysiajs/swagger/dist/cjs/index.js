"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.swagger = void 0;
const swagger_1 = require("./swagger");
const scalar_1 = require("./scalar");
const utils_1 = require("./utils");
/**
 * Plugin for [elysia](https://github.com/elysiajs/elysia) that auto-generate Swagger page.
 *
 * @see https://github.com/elysiajs/elysia-swagger
 */
const swagger = ({ provider = 'scalar', scalarVersion = 'latest', scalarCDN = '', scalarConfig = {}, documentation = {}, version = '5.9.0', excludeStaticFile = true, path = '/swagger', exclude = [], swaggerOptions = {}, theme = `https://unpkg.com/swagger-ui-dist@${version}/swagger-ui.css`, autoDarkMode = true, excludeMethods = ['OPTIONS'], excludeTags = [] } = {
    provider: 'scalar',
    scalarVersion: 'latest',
    scalarCDN: '',
    scalarConfig: {},
    documentation: {},
    version: '5.9.0',
    excludeStaticFile: true,
    path: '/swagger',
    exclude: [],
    swaggerOptions: {},
    autoDarkMode: true,
    excludeMethods: ['OPTIONS'],
    excludeTags: []
}) => (app) => {
    const schema = {};
    let totalRoutes = 0;
    if (!version)
        version = `https://unpkg.com/swagger-ui-dist@${version}/swagger-ui.css`;
    const info = {
        title: 'Elysia Documentation',
        description: 'Development documentation',
        version: '0.0.0',
        ...documentation.info
    };
    const relativePath = path.startsWith('/') ? path.slice(1) : path;
    app.get(path, () => {
        const combinedSwaggerOptions = {
            url: `${relativePath}/json`,
            dom_id: '#swagger-ui',
            ...swaggerOptions
        };
        const stringifiedSwaggerOptions = JSON.stringify(combinedSwaggerOptions, (key, value) => {
            if (typeof value == 'function')
                return undefined;
            return value;
        });
        const scalarConfiguration = {
            spec: {
                ...scalarConfig.spec,
                url: `${relativePath}/json`,
            },
            ...scalarConfig
        };
        return new Response(provider === 'swagger-ui'
            ? (0, swagger_1.SwaggerUIRender)(info, version, theme, stringifiedSwaggerOptions, autoDarkMode)
            : (0, scalar_1.ScalarRender)(scalarVersion, scalarConfiguration, scalarCDN), {
            headers: {
                'content-type': 'text/html; charset=utf8'
            }
        });
    }).get(path === '/' ? '/json' : `${path}/json`, () => {
        const routes = app.routes;
        if (routes.length !== totalRoutes) {
            totalRoutes = routes.length;
            routes.forEach((route) => {
                if (excludeMethods.includes(route.method))
                    return;
                (0, utils_1.registerSchemaPath)({
                    schema,
                    hook: route.hooks,
                    method: route.method,
                    path: route.path,
                    // @ts-ignore
                    models: app.definitions?.type,
                    contentType: route.hooks.type
                });
            });
        }
        return {
            openapi: '3.0.3',
            ...{
                ...documentation,
                tags: documentation.tags?.filter((tag) => !excludeTags?.includes(tag?.name)),
                info: {
                    title: 'Elysia Documentation',
                    description: 'Development documentation',
                    version: '0.0.0',
                    ...documentation.info
                }
            },
            paths: { ...(0, utils_1.filterPaths)(schema, {
                    excludeStaticFile,
                    exclude: Array.isArray(exclude) ? exclude : [exclude]
                }),
                ...documentation.paths
            },
            components: {
                ...documentation.components,
                schemas: {
                    // @ts-ignore
                    ...app.definitions?.type,
                    ...documentation.components?.schemas
                }
            }
        };
    });
    // This is intentional to prevent deeply nested type
    return app;
};
exports.swagger = swagger;
exports.default = exports.swagger;
